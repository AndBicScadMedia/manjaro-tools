#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

BINDIR='@bindir@'
LIBDIR='@libdir@'
PKGDATADIR='@pkgdatadir@'
SYSCONFDIR='@sysconfdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
[[ -r ${LIBDIR}/util.sh ]] && source ${LIBDIR}/util.sh
[[ -r ${LIBDIR}/util-iso.sh ]] && source ${LIBDIR}/util-iso.sh

display_settings(){
    msg "manjaro-tools"
    msg2 "version: ${version}"

    if [[ -f ${USER_CONFIG}/manjaro-tools.conf ]]; then
	msg2 "user_config: ${USER_CONFIG}/manjaro-tools.conf"
    else
	msg2 "manjaro_tools_conf: ${manjaro_tools_conf}"
    fi

    msg "PROFILE:"
    msg2 "buildsets: $(load_sets ${sets_dir_iso})"
    msg2 "buildset_iso: ${buildset_iso}"
    msg2 "is_buildset: ${is_buildset}"

    msg "OPTIONS:"
    msg2 "arch: ${arch}"
    msg2 "branch: ${branch}"
    msg2 "chroots_iso: ${chroots_iso}"

    msg "ARGS:"
    msg2 "clean_first: ${clean_first}"
    msg2 "clean_cache_xorg: ${clean_cache_xorg}"
    msg2 "clean_cache_lng: ${clean_cache_lng}"
    msg2 "images_only: ${images_only}"
    msg2 "iso_only: ${iso_only}"

    msg "PATHS:"
    msg2 "cache_dir_iso: ${cache_dir_iso}"
    msg2 "cache_dir_xorg: ${cache_dir_xorg}"
    msg2 "cache_dir_lng: ${cache_dir_lng}"

    msg "IMAGES SETTINGS:"
    msg2 "manjaro_kernel: ${manjaro_kernel}"
    msg2 "manjaro_version: ${manjaro_version}"

    msg2 "plymouth_theme: ${plymouth_theme}"

    msg "ISO SETTINGS:"
    msg2 "iso_label: ${iso_label}"
    msg2 "iso_version: ${iso_version}"
    msg2 "manjaroiso: ${manjaroiso}"
    msg2 "code_name: ${code_name}"
    msg2 "img_name: ${img_name}"
    msg2 "install_dir: ${install_dir}"
    msg2 "compression: ${compression}"

    msg "LIVECD:"
    msg2 "username: ${username}"
    msg2 "password: ${password}"
    msg2 "addgroups: ${addgroups}"
    msg2 "hostname: ${hostname}"

    msg "BUILD QUEUE:"
    if ${is_buildset};then
	local list=$(cat ${sets_dir_iso}/${buildset_iso}.set)
	for item in ${list[@]}; do
	    msg3 "$item"
	    cd $item
	    load_desktop_definition
	    load_profile
	    work_dir=${chroots_iso}/$item/${arch}
	    msg2 "initsys: ${initsys}"
	    msg2 "displaymanager: ${displaymanager}"
	    msg2 "pacman_conf: ${pacman_conf}"
	    msg2 "work_dir: ${work_dir}"
	    msg2 "iso_file: ${iso_file}"
	    if [ ${initsys} == "systemd" ];then
		msg2 "start_systemd: ${start_systemd[*]}"
		msg2 "start_systemd_live: ${start_systemd_live[*]}"
	    else
		msg2 "start_openrc: ${start_openrc[*]}"
		msg2 "start_openrc_live: ${start_openrc_live[*]}"
	    fi
	    cd ..
	done
    else
	msg3 "${buildset_iso}"
	cd ${buildset_iso}
	load_desktop_definition
	load_profile
	work_dir=${chroots_iso}/${buildset_iso}/${arch}
	msg2 "initsys: ${initsys}"
	msg2 "displaymanager: ${displaymanager}"
	msg2 "pacman_conf: ${pacman_conf}"
	msg2 "work_dir: ${work_dir}"
	msg2 "iso_file: ${iso_file}"
	if [ ${initsys} == "systemd" ];then
	    msg2 "start_systemd: ${start_systemd[*]}"
	    msg2 "start_systemd_live: ${start_systemd_live[*]}"
	else
	    msg2 "start_openrc: ${start_openrc[*]}"
	    msg2 "start_openrc_live: ${start_openrc_live[*]}"
	fi
	cd ..
    fi
}

load_user_info

load_config "${USER_CONFIG}/manjaro-tools.conf"
load_config "${SYSCONFDIR}/manjaro-tools.conf"

clean_first=true
clean_cache_xorg=true
clean_cache_lng=true

pretend=false
images_only=false
iso_only=false

pacman_conf_arch='default'

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -p <profile>       Set or profile [default: ${buildset_iso}]"
    echo "    -a <arch>          Arch [default: ${arch}]"
    echo "    -b <branch>        Branch [default: ${branch}]"
    echo '    -r <dir>           Chroots directory'
    echo "                       [default: ${chroots_iso}]"
    echo '    -c                 Disable clean work dir'
    echo '    -x                 Disable clean xorg cache'
    echo '    -l                 Disable clean lng cache'
    echo '    -i                 Build images only'
    echo '    -s                 Generate iso only'
    echo '                       Requires pre built images'
    echo '    -h                 This help'
    echo '    -q                 Query settings and pretend build'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$@")

opts='p:a:b:r:cxlisqh'

while getopts "${opts}" arg; do
    case "${arg}" in
	p) buildset_iso="$OPTARG" ;;
	a) arch="$OPTARG" ;;
	b) branch="$OPTARG" ;;
	r) chroots_iso="$OPTARG" ;;
	c) clean_first=false; iso_args+=(-f) ;;
	x) clean_cache_xorg=false ;;
	l) clean_cache_lng=false ;;
	i) images_only=true ;;
	s) iso_only=true ;;
	q) pretend=true ;;
	h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

if [[ "$arch" == 'x86_64' ]]; then
    pacman_conf_arch='multilib'
fi

sets_dir_iso="${sets_dir}/iso"
cache_dir_lng="${cache_dir}/lng"
cache_dir_xorg="${cache_dir}/xorg"
cache_dir_iso="${cache_dir}/iso"

mirrors_conf="${PKGDATADIR}/pacman-mirrors-${branch}.conf"

create_args+=(-v -a ${arch} -D ${install_dir} -M ${mirrors_conf})

iso_args+=(-v -x -a ${arch} -D ${install_dir} -L ${iso_label} -c ${compression})

check_root "$0" "${orig_argv[@]}"

eval_buildset "${buildset_iso}" "${sets_dir_iso}"

prepare_cachedirs

${pretend} && display_settings && exit 1

build_iso
